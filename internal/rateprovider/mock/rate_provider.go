// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mockrateprovider

import (
	"context"
	"itspay/internal/entity"
	"itspay/internal/rateprovider"
	"sync"
)

// Ensure, that RateProviderMock does implement rateprovider.RateProvider.
// If this is not the case, regenerate this file with moq.
var _ rateprovider.RateProvider = &RateProviderMock{}

// RateProviderMock is a mock implementation of rateprovider.RateProvider.
//
//	func TestSomethingThatUsesRateProvider(t *testing.T) {
//
//		// make and configure a mocked rateprovider.RateProvider
//		mockedRateProvider := &RateProviderMock{
//			GetRateFunc: func(ctx context.Context) (*entity.Rate, error) {
//				panic("mock out the GetRate method")
//			},
//		}
//
//		// use mockedRateProvider in code that requires rateprovider.RateProvider
//		// and then make assertions.
//
//	}
type RateProviderMock struct {
	// GetRateFunc mocks the GetRate method.
	GetRateFunc func(ctx context.Context) (*entity.Rate, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetRate holds details about calls to the GetRate method.
		GetRate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetRate sync.RWMutex
}

// GetRate calls GetRateFunc.
func (mock *RateProviderMock) GetRate(ctx context.Context) (*entity.Rate, error) {
	if mock.GetRateFunc == nil {
		panic("RateProviderMock.GetRateFunc: method is nil but RateProvider.GetRate was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetRate.Lock()
	mock.calls.GetRate = append(mock.calls.GetRate, callInfo)
	mock.lockGetRate.Unlock()
	return mock.GetRateFunc(ctx)
}

// GetRateCalls gets all the calls that were made to GetRate.
// Check the length with:
//
//	len(mockedRateProvider.GetRateCalls())
func (mock *RateProviderMock) GetRateCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetRate.RLock()
	calls = mock.calls.GetRate
	mock.lockGetRate.RUnlock()
	return calls
}
